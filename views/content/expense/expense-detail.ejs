
<div class="kt-container  kt-container--fluid  kt-grid__item kt-grid__item--fluid" >
    <div id="expenseAction" ></div>
      
	<div class="">
	    <h6 class="text-danger" id="errDisplay"></h6>
	</div>
    <div class="row">
        <div class="col-xl-6" id="expenseDetail">

            <div class="kt-spinner kt-spinner--sm kt-spinner--success kt-spinner--center kt-spinner--input">
                <input  type="text" class="form-control"/>
            </div>
        </div>
    </div>
</div>

<!--begin::Modal-->
<div class="modal fade" id="editExpense" role="dialog" aria-labelledby="" aria-hidden="true">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="">Edit Expense</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true" class="la la-remove"></span>
				</button>
			</div>
			<form class="kt-form kt-form--fit kt-form--label-right" action="#" id="updateExpense" onsubmit="submitExpense(event)">
  			<div class="modal-body" id="expenseForm">
  			  <div class="form-group">
  						<label>Expense Title:</label>
  						<input type="text" name="title" id="title" value="<%= expense.title %>" class="form-control" placeholder="Expense Title">
  						<span class="form-text text-muted">Please enter the expense title</span>
  					</div>
  					<div class="form-group">
  						<label>Expense Description:</label>
  						<input type="text" name="desc" id="desc" value="<%= expense.desc %>" class="form-control" placeholder="Expense Desciption">
  						<span class="form-text text-muted">Please enter the expense description</span>
  					</div>
  					<div class="form-group">
  						<label>Amount:</label>
  						<input type="number" name="amount" id="amount" value="<%= expense.amount %>" class="form-control" placeholder="Expense Amount">
  					</div>
  					<div class="form-group">
  						<label>Type:</label>
  						<select class="form-control kt-select2" id="kt_select2_2_modal" name="type" id="type"> 
  						    <option value="<%= expense.TypeId %>"><%= expense.Type.type_name %></option>
    						  <% types.forEach(function(type) { %>
						    		<option value="<%= type.id %>" ><%= type.type_name %></option>
						    	<% });%>
  						</select>
  					</div>
  					<div class="form-group">
  						<label>Category:</label>
  						<select class="form-control kt-select2" id="kt_select2_3_modal" name="category" id="category">
  						    <option value="<%= expense.CategoryId %>"><%= expense.Category.category_name %></option>
  					      <% categories.forEach(function(category) { %>
						    		<option value="<%= category.id %>" ><%= category.category_name %></option>
						    	<% });%>
  						</select>
  					</div>
  			</div>
  			<div class="modal-footer">
  				<button type="submit" class="btn btn-brand" id="expenseUpdateBtn" >Update</button>
  			</div>
			</form>
			
		</div>
	</div>
</div>
<!--end::Modal-->

<script>
const userId = `<%= user.id %>`;
const userRoleId = `<%= user.RoleId %>`;
const expenseId = `<%= id %>`;
const submitBtn = document.getElementById('expenseUpdateBtn');

submitBtn.addEventListener('click', ()=>{
  submitBtn.innerHTML = '<i class="kt-spinner kt-spinner--md kt-spinner--center px-4 kt-spinner--light"></i>';
});

const submitExpense = async (event) => {
	try {
  event.preventDefault();
  //const form = event.target;
  const form = document.getElementById('updateExpense');
  const formData = {
          title: form.title.value,
          desc: form.desc.value,
          amount: form.amount.value,
          type: form.type.value,
          category: form.category.value,
        }
  
  console.log(formData);
  
  
    const expense = await updateExpense(formData);
    let errors = '';
    console.log(expense);
    if (expense.status) {
      swal.fire(
        'Awesome!',
        'Expense updated!',
        'success'
      )
      location.href = `/expense/${expenseId}`;
    } else {
      submitBtn.innerHTML = 'Update Expense';
      for (let i = 0; i < expense.errors.length; i++) {
        errors += expense.errors[i].msg;
        if (i < expense.errors.length - 1) errors += ', ';
      }
      console.log(errors);
      document.getElementById('errDisplay').innerHTML = errors;
      swal.fire(
        'Oops!',
        `Operation unsuccessful!`,
        'error'
      )
    }
  } catch (error) {
    console.log(error);
    // show network error notification
    // swal.fire(
    //   'Oops!',
    //   'An error was encountered! Please review your network connection.',
    //   'error'
    // )
  }

};

const updateExpense = async (data) => {
    console.log(data)
    try {
      const expense = await fetch(`${Route.apiRoot}/expense/${expenseId}/update`, {
        // mode: 'no-cors',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      return await expense.json();
    } catch (error) {
      console.log(error);
      // show network error notification
      //swal.fire(
      //  'Oops!',
      //  'An error was encountered! Please review your network connection.',
      //  'error'
      //)
    }
  };
  
 const deleteExpense = async ()=>{
    try {
      const expense = await fetch(`${Route.apiRoot}/expense/${expenseId}/delete`, {
        // mode: 'no-cors',
        method: 'POST'
      });
      let response = await expense.json();
      if (response.status) {
        swal.fire(
            'Sucessful!',
            'Expense deleted successfully!',
            'success'
          )
          location.href = `/expenses`;
      }
    } catch (error) {
      console.log(error);
      // show network error notification
      swal.fire(
        'Oops!',
        'An error was encountered! Please review your network connection.',
        'error'
      )
    }
  }
  
  const onActionCompleted = (approval) => {
    
    if (approval.status) {
      swal.fire(
        'Awesome!',
        'Operation Successful',
        'success'
      )
      location.href = `/expense/${expenseId}`;
    } else {
      swal.fire(
        'Oops!',
        `An error was encountered! Please reload and try again.`,
        'error'
      )
    }
  }

  const onErrorCatch = (error) => {
    console.log(error);
      // show network error notification
      swal.fire(
        'Oops!',
        'An error was encountered! Please review your network connection.',
        'error'
      )
  }
  // Submission grading functions
  const approveExpense = async () => {
    Swal.fire({
        title: 'Are you sure?',
        text: "Your action wil approve this expense!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Approve it!'
      }).then( async (result) => {
        if (result.value) {
          try {
            const response = await fetch(`${Route.apiRoot}/expense/${expenseId}/approval/1`, {
              method: 'GET',
            });
            const approval = await response.json();
            onActionCompleted(approval);
          } catch (error) {
            onErrorCatch(error);
          }
        }
      })
  };

  const declineExpense = async () => {
    Swal.fire({
        title: 'Are you sure?',
        text: "Your action wil decline this expense!",
        type: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Decline it!'
      }).then( async (result) => {
        if (result.value) {
          try {
            const response = await fetch(`${Route.apiRoot}/expense/${expenseId}/approval/2`, {
              method: 'GET',
            });
            const approval = await response.json();
            onActionCompleted(approval);
          } catch (error) {
            onErrorCatch(error);
          }
        }
      })
  };
  
  async function expenseAction() {
    try {
      const response = await fetch(`${Route.apiRoot}/expense/${expenseId}`, {
        method: 'GET',
      });
      let expenseData = await response.json();
      const expense = expenseData.data;
      console.log(expense);
      console.log('I am loaded1');
      console.log('this is expense user ID ' + expense.userId )
      if (expense.userId == `${userId}` || `${userRoleId}` == 1) { 
        document.getElementById('expenseAction').innerHTML = `
            <div class="dropdown dropdown-block text-right">
                <span class="d-inline-block" tabindex="0" data-toggle="kt-tooltip" data-skin="brand" title="More options">
                    <button type="button" class="btn btn-hover-brand btn-elevate-hover btn-icon btn-sm btn-icon-md btn-circle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                      <i class="flaticon-more-1"></i>
                    </button>
              		<div class="dropdown-menu" aria-labelledby="dropdownMenuButton" id="userAction">
                        
                         
              		</div>
              	</span>
        	</div>
      	  
        `;
        console.log('I am loaded');
        if (userId == expense.userId) { 
          document.getElementById('userAction').innerHTML = `
      			<button type="button" class="dropdown-item" data-toggle="modal" data-target="#editExpense">
              Edit
            </button>
            <a class="dropdown-item text-danger" onclick="deleteExpense()">Delete</a>
          `;
          }
          
        if (userRoleId == 1) { 
            if (expense.status == 'Pending') { 
              document.getElementById('userAction').innerHTML += `
                <a class="dropdown-item text-success" onclick="approveExpense()">Approve</a>
                <a class="dropdown-item text-danger" onclick="declineExpense()">Decline</a>
                `;
            } else if (expense.status == 'Approved') { 
              document.getElementById('userAction').innerHTML += `
                <a class="dropdown-item text-danger" onclick="declineExpense()">Decline</a>
                `;
            } else { 
              document.getElementById('userAction').innerHTML += `
                <a class="dropdown-item text-success" onclick="approveExpense()">Approve</a>
                `;
            } 
        }
         
        }
    } catch (error) {
      console.log('this is the error ' + error);
    }
  }
  expenseAction();
  // const expenseAction = async () => {
  //   try {
  //     const response = await fetch(`${Route.apiRoot}/expense/${expenseId}`, {
  //       method: 'GET',
  //     });
  //     let expenseData = await response.json();
  //     const expense = expenseData.data;
  //     console.log(expense);
  //     if (expense.userId == userId || userRoleId == 1) { 
  //       document.getElementById('expenseAction').innerHTML = `
           
  //           <div class="dropdown dropdown-block text-right">
  //               <span class="d-inline-block" tabindex="0" data-toggle="kt-tooltip" data-skin="brand" title="More options">
  //                   <button type="button" class="btn btn-hover-brand btn-elevate-hover btn-icon btn-sm btn-icon-md btn-circle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
  //                     <i class="flaticon-more-1"></i>
  //                   </button>
  //             		<div class="dropdown-menu" aria-labelledby="dropdownMenuButton" id="userAction">
  //                       <!-- Button trigger modal -->`
                         
                          
                        
  //             	`	</div>
  //             	</span>
  //       	</div>
      	  
  //       `;
  //       if (userId == expense.userId) { 
  //         document.getElementById('userAction').innerHTML = `
  //     			<button type="button" class="dropdown-item" data-toggle="modal" data-target="#editExpense">
  //             Edit
  //           </button>
  //           <a class="dropdown-item text-danger" onclick="deleteExpense()">Delete</a>
  //         `;
  //         }
          
  //       if (userRoleId == 1) { 
  //           if (expense.status == 'Pending') { 
  //             document.getElementById('userAction').innerHTML += `
  //               <a class="dropdown-item text-success" onclick="approveExpense()">Approve</a>
  //               <a class="dropdown-item text-danger" onclick="declineExpense()">Decline</a>
  //               `;
  //           } else if (expense.status == 'Approved') { 
  //             document.getElementById('userAction').innerHTML += `
  //               <a class="dropdown-item text-danger" onclick="declineExpense()">Decline</a>
  //               `;
  //           } else { 
  //             document.getElementById('userAction').innerHTML += `
  //               <a class="dropdown-item text-success" onclick="approveExpense()">Approve</a>
  //               `;
  //           } 
  //       }
         
  //       }
  //   } catch (error) {
  //     console.log(error)
  //   }
    
  // };
  
</script>